//
// MarketAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MarketAPI {
    /**
     Получение списка облигаций

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketBondsGet(completion: @escaping ((_ data: MarketInstrumentListResponse?,_ error: Error?) -> Void)) {
        marketBondsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение списка облигаций
     - GET /market/bonds
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "total" : 0.8008281904610115,
    "instruments" : [ {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    }, {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    } ]
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]

     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketBondsGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/bonds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение исторических свечей по FIGI

     - parameter figi: (query) FIGI 
     - parameter from: (query) Начало временного промежутка 
     - parameter to: (query) Конец временного промежутка 
     - parameter interval: (query) Интервал свечи 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketCandlesGet(figi: String, from: Date, to: Date, interval: CandleResolution, completion: @escaping ((_ data: CandlesResponse?,_ error: Error?) -> Void)) {
        marketCandlesGetWithRequestBuilder(figi: figi, from: from, to: to, interval: interval).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение исторических свечей по FIGI
     - GET /market/candles
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "figi" : "figi",
    "interval" : "1min",
    "candles" : [ {
      "c" : 6.027456183070403,
      "v" : 5,
      "h" : 1.4658129805029452,
      "figi" : "figi",
      "time" : "2019-08-19T18:38:33.131642+03:00",
      "l" : 5.962133916683182,
      "o" : 0.8008281904610115
    }, {
      "c" : 6.027456183070403,
      "v" : 5,
      "h" : 1.4658129805029452,
      "figi" : "figi",
      "time" : "2019-08-19T18:38:33.131642+03:00",
      "l" : 5.962133916683182,
      "o" : 0.8008281904610115
    } ]
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter figi: (query) FIGI 
     - parameter from: (query) Начало временного промежутка 
     - parameter to: (query) Конец временного промежутка 
     - parameter interval: (query) Интервал свечи 

     - returns: RequestBuilder<CandlesResponse> 
     */
    open class func marketCandlesGetWithRequestBuilder(figi: String, from: Date, to: Date, interval: CandleResolution) -> RequestBuilder<CandlesResponse> {
        let path = "/market/candles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "figi": figi, 
                        "from": from.encodeToJSON(), 
                        "to": to.encodeToJSON(), 
                        "interval": interval
        ])

        let requestBuilder: RequestBuilder<CandlesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка валютных пар

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketCurrenciesGet(completion: @escaping ((_ data: MarketInstrumentListResponse?,_ error: Error?) -> Void)) {
        marketCurrenciesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение списка валютных пар
     - GET /market/currencies
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "total" : 0.8008281904610115,
    "instruments" : [ {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    }, {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    } ]
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]

     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketCurrenciesGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/currencies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка ETF

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketEtfsGet(completion: @escaping ((_ data: MarketInstrumentListResponse?,_ error: Error?) -> Void)) {
        marketEtfsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение списка ETF
     - GET /market/etfs
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "total" : 0.8008281904610115,
    "instruments" : [ {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    }, {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    } ]
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]

     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketEtfsGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/etfs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение исторических стакана по FIGI

     - parameter figi: (query) FIGI 
     - parameter depth: (query) Глубина стакана [1..20] 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketOrderbookGet(figi: String, depth: Int, completion: @escaping ((_ data: OrderbookResponse?,_ error: Error?) -> Void)) {
        marketOrderbookGetWithRequestBuilder(figi: figi, depth: depth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение исторических стакана по FIGI
     - GET /market/orderbook
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "depth" : 0,
    "faceValue" : 5.637376656633329,
    "asks" : [ null, null ],
    "tradeStatus" : "NormalTrading",
    "bids" : [ {
      "quantity" : 1,
      "price" : 6.027456183070403
    }, {
      "quantity" : 1,
      "price" : 6.027456183070403
    } ],
    "limitUp" : 9.301444243932576,
    "figi" : "figi",
    "closePrice" : 7.061401241503109,
    "limitDown" : 3.616076749251911,
    "minPriceIncrement" : 5.962133916683182,
    "lastPrice" : 2.3021358869347655
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter figi: (query) FIGI 
     - parameter depth: (query) Глубина стакана [1..20] 

     - returns: RequestBuilder<OrderbookResponse> 
     */
    open class func marketOrderbookGetWithRequestBuilder(figi: String, depth: Int) -> RequestBuilder<OrderbookResponse> {
        let path = "/market/orderbook"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "figi": figi, 
                        "depth": depth.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrderbookResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение инструмента по FIGI

     - parameter figi: (query) FIGI 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketSearchByFigiGet(figi: String, completion: @escaping ((_ data: SearchMarketInstrumentResponse?,_ error: Error?) -> Void)) {
        marketSearchByFigiGetWithRequestBuilder(figi: figi).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение инструмента по FIGI
     - GET /market/search/by-figi
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "lot" : 6,
    "ticker" : "ticker",
    "name" : "name",
    "figi" : "figi",
    "currency" : "RUB",
    "type" : "Stock",
    "isin" : "isin",
    "minPriceIncrement" : 0.8008281904610115
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter figi: (query) FIGI 

     - returns: RequestBuilder<SearchMarketInstrumentResponse> 
     */
    open class func marketSearchByFigiGetWithRequestBuilder(figi: String) -> RequestBuilder<SearchMarketInstrumentResponse> {
        let path = "/market/search/by-figi"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "figi": figi
        ])

        let requestBuilder: RequestBuilder<SearchMarketInstrumentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение инструмента по тикеру

     - parameter ticker: (query) Тикер инструмента 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketSearchByTickerGet(ticker: String, completion: @escaping ((_ data: MarketInstrumentListResponse?,_ error: Error?) -> Void)) {
        marketSearchByTickerGetWithRequestBuilder(ticker: ticker).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение инструмента по тикеру
     - GET /market/search/by-ticker
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "total" : 0.8008281904610115,
    "instruments" : [ {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    }, {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    } ]
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter ticker: (query) Тикер инструмента 

     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketSearchByTickerGetWithRequestBuilder(ticker: String) -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/search/by-ticker"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ticker": ticker
        ])

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка акций

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketStocksGet(completion: @escaping ((_ data: MarketInstrumentListResponse?,_ error: Error?) -> Void)) {
        marketStocksGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение списка акций
     - GET /market/stocks
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "total" : 0.8008281904610115,
    "instruments" : [ {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    }, {
      "lot" : 1,
      "ticker" : "ticker",
      "name" : "name",
      "figi" : "figi",
      "currency" : "RUB",
      "type" : "Stock",
      "isin" : "isin",
      "minPriceIncrement" : 6.027456183070403
    } ]
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]

     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketStocksGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/stocks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
