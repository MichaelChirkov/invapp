//
// SandboxAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SandboxAPI {
    /**
     Удаление всех позиций

     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxClearPost(brokerAccountId: String? = nil, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        sandboxClearPostWithRequestBuilder(brokerAccountId: brokerAccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Удаление всех позиций
     - POST /sandbox/clear

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : { },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)

     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxClearPostWithRequestBuilder(brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/clear"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "brokerAccountId": brokerAccountId
        ])

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Выставление баланса по валютным позициям

     - parameter body: (body) Запрос на выставление баланса по валютным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxCurrenciesBalancePost(body: SandboxSetCurrencyBalanceRequest, brokerAccountId: String? = nil, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        sandboxCurrenciesBalancePostWithRequestBuilder(body: body, brokerAccountId: brokerAccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Выставление баланса по валютным позициям
     - POST /sandbox/currencies/balance
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : { },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter body: (body) Запрос на выставление баланса по валютным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)

     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxCurrenciesBalancePostWithRequestBuilder(body: SandboxSetCurrencyBalanceRequest, brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/currencies/balance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "brokerAccountId": brokerAccountId
        ])

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Выставление баланса по инструментным позициям

     - parameter body: (body) Запрос на выставление баланса по инструментным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxPositionsBalancePost(body: SandboxSetPositionBalanceRequest, brokerAccountId: String? = nil, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        sandboxPositionsBalancePostWithRequestBuilder(body: body, brokerAccountId: brokerAccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Выставление баланса по инструментным позициям
     - POST /sandbox/positions/balance
     - 

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : { },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter body: (body) Запрос на выставление баланса по инструментным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)

     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxPositionsBalancePostWithRequestBuilder(body: SandboxSetPositionBalanceRequest, brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/positions/balance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "brokerAccountId": brokerAccountId
        ])

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Регистрация клиента в sandbox

     - parameter body: (body) Запрос на создание счета и выставление баланса по валютным позициям (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxRegisterPost(body: SandboxRegisterRequest? = nil, completion: @escaping ((_ data: SandboxRegisterResponse?,_ error: Error?) -> Void)) {
        sandboxRegisterPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Регистрация клиента в sandbox
     - POST /sandbox/register

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : {
    "brokerAccountId" : "brokerAccountId",
    "brokerAccountType" : "Tinkoff"
  },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter body: (body) Запрос на создание счета и выставление баланса по валютным позициям (optional)

     - returns: RequestBuilder<SandboxRegisterResponse> 
     */
    open class func sandboxRegisterPostWithRequestBuilder(body: SandboxRegisterRequest? = nil) -> RequestBuilder<SandboxRegisterResponse> {
        let path = "/sandbox/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SandboxRegisterResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Удаление счета

     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxRemovePost(brokerAccountId: String? = nil, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        sandboxRemovePostWithRequestBuilder(brokerAccountId: brokerAccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Удаление счета
     - POST /sandbox/remove

     - :
       - type: http
       - name: sso_auth
     - examples: [{contentType=application/json, example={
  "payload" : { },
  "trackingId" : "trackingId",
  "status" : "Ok"
}}]
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)

     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxRemovePostWithRequestBuilder(brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/remove"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "brokerAccountId": brokerAccountId
        ])

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
